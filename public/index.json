[
{
	"uri": "/",
	"title": "AWS Web Application Firewall",
	"tags": [],
	"description": "",
	"content": "AWS Web Application Firewall Overview In this lab, you’ll learn the basic and practice of AWS Web Application Firewall.\n AWS WAF   Content:  Introduction Prepare Using AWS WAF Clean up resources  "
},
{
	"uri": "/2-prepare/2.1-creates3/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Create S3 bucket  Go to S3 service management interface.   Click Create bucket.   Name our s3 bucket aws-waf-logs-001. You can change the suffix number after the example aws-waf-logs-002 because the s3 bucket name must not be duplicated.\n  Drag the screen down, then click Create bucket.  Make sure the bucket is successfully created as shown below, before proceeding to the next steps.   "
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce AWS WAF AWS WAF(AWS Web Application Firewall) is a web application firewall service. It helps protect your web applications or APIs against common web exploits that may affect availability, compromise security, or consume excessive resources.\nUsing a WAF is a great way to add defense in depth to your web application. A WAF can help mitigate the risk of vulnerabilities such as SQL Injection, Cross Site Scripting and other common attacks (which listed in Top 10 OWASP). WAF allows you to create your own custom rules to decide whether to block or allow HTTP requests before they reach your application.\n AWS WAF   "
},
{
	"uri": "/3-useawswaf/3.1-createswebacl/",
	"title": "Web ACLs with managed rules",
	"tags": [],
	"description": "",
	"content": "Situation You are the sole developer for the start up Juice Shop. Your website is a simple web application backed by a SQL Database. For some reason, a group of Milkshake bandits have started attacking your site!\nLuckily, you recently attended a workshop on AWS WAF. You decide to implement your own WAF to protect your site.\nAt this time, you don’t have much time, so you decide to deploy two AWS Managed Rule groups to your WebACL. This will protect your website from the common attacks the milkshake bandits are using.\nWeb ACLs with managed rules Web ACLs (Web Access Control List) is the core resource in an AWS WAF deployment. It contains rules that are evaluated for each request that it receives. A web ACL is associated to your web application via either an Amazon CloudFront distribution, AWS API Gateway API or an AWS Application Load Balancer.\nManaged rule groups are a set of rules, created and maintained by AWS or third-parties on the AWS Marketplace. These rules provide protections against common types of attacks, or are intended for particular application types.\n  Goto AWS WAF Console. This workshop uses the latest version of AWS WAF. Make sure you do not use WAF Classic.\n    Click Create web ACL.   In the Web ACL details section.   In the Resource type section, Click CloudFront distributions. In the Name section type waf-workshop-juice-shop. In the Description section type Web ACL for the aws-waf-workshop.   In the Associated AWS resources section, Click Add AWS resources.  In the Add AWS resources section, Click E24BURECS1O10C - dkievcmqb5kzc.cloudfront.net - WAF Workshop CloudFront Distribution(CloudFront distribution we created).   Click Add.   Click Next.  In the Rules section.   Click Add rules. Click Add managed rule groups.   In the Add managed rule groups page, Click AWS managed rule groups.  Select Core Rule Set and SQL Database.  Drag the screen down, Click Add rules.  In the Add managed rule groups page, click Next.  In the Set rule priority page, click Next.  In the Configure metrics page, click Next.  In the Review and create web ACL page, Drag the screen down, click Create web ACL.  Run command  # This imitates a Cross Site Scripting attack # This request should be blocked. curl -X POST \u0026lt;Your Juice Shop URL\u0026gt; -F \u0026#34;user=\u0026#39;\u0026lt;script\u0026gt;\u0026lt;alert\u0026gt;Hello\u0026gt;\u0026lt;/alert\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;\u0026#34; 15. Run command\n# This imitates a SQL Injection attack # This request should be blocked. curl -X POST \u0026lt;Your Juice Shop URL\u0026gt; -F \u0026#34;user=\u0026#39;AND 1=1;\u0026#34; "
},
{
	"uri": "/3-useawswaf/3.2-createcustomrule/",
	"title": "Custom Rule",
	"tags": [],
	"description": "",
	"content": "Situation Just as you thought you had solved your milkshake fiasco, more malicious requests are targeting your application. The attacks have become more specific. You realise you can block these attacks with a custom rule for your WAF Web ACL. All of the attacks seem to contain a strange header, X-TomatoAttack. Blocking requests with that header will stop the attack.\nTạo Custom Rule WAF allows you to create your own rules for handling requests. This is useful for adding logic relevant for your specific application. Alongside custom rules, this section will introduce request sampling and Web ACL Capacity Units.\n  In the detail of Web ACL page.   Click Rules. Click Add Rules. Click Add my own rules and rule groups.   In the Rule builder section.   In the Name section, type MyCustomRule-X-TomatoAttack.   In the Statement section.   In the Inspect section, Select Single header. In the Header field name section, type X-TomatoAttack. In the Match type section, Select Size greater than or equal to. In the Size in bytes section, type 0.   In the Action section.   In the Action section, Click Block. Click Add rule.   Click Save. You could also achieve the same goal using a regular expression.\n  Run command.  # This will be blocked curl -H \u0026#34;X-TomatoAttack: Red\u0026#34; \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;\u0026#34; 7. Run command.\n# This will be blocked curl -H \u0026#34;X-TomatoAttack: Green\u0026#34; \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;\u0026#34; 8. In the detail of Web ACL page.\n Click Overview. Drag the screen down, in the Sampled requests section, You will see these requests marked as BLOCK.   "
},
{
	"uri": "/2-prepare/2.2-deploythesamplewebapp/",
	"title": "Deploy the sample Web App",
	"tags": [],
	"description": "",
	"content": "Deploy the Sample Web App In this workshop, you will use the OWASP Juice Shop. The Juice Shop is an Open Source web application that is intentionally insecure. Pwning OWASP Juice Shop is a free book that explains the app and its vulnerabilities in more detail.\n  Choose a region to deploy the Sample Web App to, and follow the appropriate link from the table below.\n   Region Launch Template     US East (N. Virginia) (us-east-1)    US East (Ohio) (us-east-2)    US West (Oregon) (us-west-2)    EU (Ireland) (eu-west-1)    EU (London) (eu-west-2)       Click Next.\n  In the Specify stack details page, click Next.  In the Configure stack options page, click Next.   In the Review WAFWorkshopSampleWebApp page:\n Drag the screen down. Click I acknowledge that AWS CloudFormation might create IAM resources with custom names. Click I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND. Click Create stack.  Cloudformation will take 5 minutes to deploy Juice Shop App. Wait until all stacks are shown in a CREATE_COMPLETE state.\n   Click Output, Click dkievcmqb5kzc.cloudfront.net (URL of Juice Shop web) to go to your app.\n  "
},
{
	"uri": "/2-prepare/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation for Workshop In this section, we will create the S3 bucket and deploy the sample web app.\nNội dung:  Create S3 bucket Deploy the sample Web App  "
},
{
	"uri": "/3-useawswaf/3.3-createadvancecustomrule/",
	"title": "Advanced Custom Rule",
	"tags": [],
	"description": "",
	"content": "Situation The milkshake bandits are back attacking your app. They’ve changed their attack again! You’ll need to update the rule to block these requests, whilst allow genuine customers.\nCreate Advanced Custom Rule All WAF Rules are defined as JSON objects. For complex rules, it can be more efficient to work directly with the JSON format than via the Console rules editor. You can retrieve existing rules in JSON format using the API, CLI or Console using the get-rule-group command. Modify them using your favourite JSON text editor, then reupload them using update-rule-group in the API, CLI or Console.\nDefining rules in JSON allows you to use version control as a source of truth to see how, when and why iterations of complex rulesets have changed.\n For this challenge, you start with a rule:\nThis Rule will block any requests that either::\n Contain the header x-milkshake: chocolate Contain the query parameter milkshake=banana   In the detail of Web ACL page.   Click Rules. Click Add Rules. Click Add my own rules and rule groups.   In the Rule builder section.   Click Rule JSON editor. In the JSON section, type  { \u0026#34;Name\u0026#34;: \u0026#34;complex-rule-challenge\u0026#34;, \u0026#34;Priority\u0026#34;: 0, \u0026#34;Action\u0026#34;: { \u0026#34;Block\u0026#34;: {} }, \u0026#34;VisibilityConfig\u0026#34;: { \u0026#34;SampledRequestsEnabled\u0026#34;: true, \u0026#34;CloudWatchMetricsEnabled\u0026#34;: true, \u0026#34;MetricName\u0026#34;: \u0026#34;complex-rule-challenge\u0026#34; }, \u0026#34;Statement\u0026#34;: { \u0026#34;OrStatement\u0026#34;: { \u0026#34;Statements\u0026#34;: [ { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleHeader\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;x-milkshake\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;chocolate\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } }, { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleQueryArgument\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;milkshake\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;banana\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } } ] } } } 3. Drag the screen down, Click Add rule. 4. Click Save. Update the Rule This rule was working, but the attackers have adapted. Now malicious requests contain either:\n The header x-milkshake: chocolate and the header x-favourite-topping: nuts The query parameter milkshake=banana and the query parameter favourite-topping=sauce   In the detail of Web ACL page.   Click Rules. Click complex-rule-challenge(the name of the rule you want update).   Click Edit.  In the Rule builder section.   Click Rule JSON editor. In the JSON section, type  { \u0026#34;Name\u0026#34;: \u0026#34;complex-rule-challenge\u0026#34;, \u0026#34;Priority\u0026#34;: 0, \u0026#34;Action\u0026#34;: { \u0026#34;Block\u0026#34;: {} }, \u0026#34;VisibilityConfig\u0026#34;: { \u0026#34;SampledRequestsEnabled\u0026#34;: true, \u0026#34;CloudWatchMetricsEnabled\u0026#34;: true, \u0026#34;MetricName\u0026#34;: \u0026#34;complex-rule-challenge\u0026#34; }, \u0026#34;Statement\u0026#34;: { \u0026#34;OrStatement\u0026#34;: { \u0026#34;Statements\u0026#34;: [ { \u0026#34;AndStatement\u0026#34;: { \u0026#34;Statements\u0026#34;: [ { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleHeader\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;x-milkshake\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;chocolate\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } }, { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleHeader\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;x-favourite-topping\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;nuts\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } } ] } }, { \u0026#34;AndStatement\u0026#34;: { \u0026#34;Statements\u0026#34;: [ { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleQueryArgument\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;milkshake\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;banana\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } }, { \u0026#34;ByteMatchStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleQueryArgument\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;favourite-topping\u0026#34; } }, \u0026#34;PositionalConstraint\u0026#34;: \u0026#34;EXACTLY\u0026#34;, \u0026#34;SearchString\u0026#34;: \u0026#34;sauce\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } } ] } } ] } } } 4. Click Save rule. 5. Click Save 6. Run command\n# This will be allowed curl -H \u0026#34;x-milkshake: chocolate\u0026#34; \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;\u0026#34; curl \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;?milkshake=banana\u0026#34; 7. Run command\n# This will be blocked curl -H \u0026#34;x-milkshake: chocolate\u0026#34; -H \u0026#34;x-favourite-topping: nuts\u0026#34; \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;\u0026#34; curl \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;?milkshake=banana\u0026amp;favourite-topping=sauce\u0026#34; Blocked requests will give a response like below:\n\u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/loose.dtd\u0026#34;\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=iso-8859-1\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;ERROR: The request could not be satisfied\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;403 ERROR\u0026lt;/h1\u0026gt; \u0026lt;!-- Omitted --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; In this section, you learnt about the JSON format for WAF Rules. Complex logic can be defined in rules using the And, Or and Not operators.\n"
},
{
	"uri": "/3-useawswaf/",
	"title": "Using AWS WAF",
	"tags": [],
	"description": "",
	"content": "Using AWS WAF In this section, we will:\n Create a Web ACL from the WAF console. Create a Rule for your WAF. Test the New Rules. Log the requests.  Content:  Web ACLs with managed rules Custom Rule Advanced Custom Rule Testing New Rules Log the requests  "
},
{
	"uri": "/4-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "You clean up resources in the following order:\nDelete the sample web  Go to CloudFormation Console.   Select WAFWorkshopSampleWebApp. Click Delete.   Click Delete stack to delete.   Delete Web ACL  Go to AWS WAF Console.   Click Web ACLs. Select waf-workshop-juice-shop. Click Delete.   Type delete to confirm, then click Delete to delete.   Delete Kinesis  Go to Amazon Kinesis Console.   Click Delivery streams. Select aws-waf-logs-workshop-26. Click Delete.   Type aws-waf-logs-workshop-26 to confirm, then click Delete to delete.   Delete S3 bucket  Go to giao diện quản trị dịch vụ S3.   You would clean up resources in the following order: aws-waf-logs-001. Click Empty.   Type permanently delete to confirm, then click Empty to delete all the data in this S3 bucket.    Click Exit to back to the S3 interface.   Select S3 bucket aws-waf-logs-001, then click Delete.  Type the name of the bucket, then click Delete bucket to delete the S3 bucket.   "
},
{
	"uri": "/3-useawswaf/3.4-testingnewrule/",
	"title": "Testing New Rules ",
	"tags": [],
	"description": "",
	"content": "Before deploying a new rule, it’s vital to test it. This is to ensure you don’t accidentally block valid requests.\nSo far you have used Block and Allow when specifying what action to take on a request. There is a third action, Count. Count allows you to measure the number of requests that would meet the rule conditions.\nCount is a non-terminating action. When a request matches a rule with the Count action, the web ACL will continue processing the remaining rules.\nSituation You have developed a new rule for your WAF. Before you can deploy it, you must first test it. This is to reduce the risk of unintentionally introducing rules that block genuine requests.\nThe rule below blocks requests with the query parameter username.\nKiểm thử Rule mới  Create a new rule like Create Advanced Custom Rule in 3.3 section.   In the JSON section, type  { \u0026#34;Name\u0026#34;: \u0026#34;count-von-count\u0026#34;, \u0026#34;Priority\u0026#34;: 0, \u0026#34;Action\u0026#34;: { \u0026#34;Count\u0026#34;: {} }, \u0026#34;VisibilityConfig\u0026#34;: { \u0026#34;SampledRequestsEnabled\u0026#34;: true, \u0026#34;CloudWatchMetricsEnabled\u0026#34;: true, \u0026#34;MetricName\u0026#34;: \u0026#34;count-von-count\u0026#34; }, \u0026#34;Statement\u0026#34;: { \u0026#34;SizeConstraintStatement\u0026#34;: { \u0026#34;FieldToMatch\u0026#34;: { \u0026#34;SingleQueryArgument\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;username\u0026#34; } }, \u0026#34;ComparisonOperator\u0026#34;: \u0026#34;GT\u0026#34;, \u0026#34;Size\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;TextTransformations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;Priority\u0026#34;: 0 } ] } } } Run command  curl \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;?username=admin\u0026#34; 3. Go to CloudWatch Metrics.\n Click WAFv2  Click Rule, WebACL  Select count-von-count, We will see a request in Untitled graph section.   Before deploying a new rule, it’s vital to test it. This is to ensure you don’t accidentally block valid requests.\n"
},
{
	"uri": "/3-useawswaf/3.5-logging/",
	"title": "Log the requests",
	"tags": [],
	"description": "",
	"content": "Situation The Juice Shop is growing rapidly. Great work! Now that you have a set of rules, it is becoming more difficult to reason which rule is responsible for blocking a request. It would be helpful to have some logs. To do this, you need to enable logging for your Web ACL to an S3 Bucket. Your logs contain a sensitive header, named Cookie. You don’t want this to be stored in your logs. You will need configure the redaction of this header in the logs.\nLog the requests WAF Uses Amazon Kinesis Firehose to ingest logs. This allows logs to be passed to any Kinesis Firehose destination, such as Amazon S3, Amazon Redshift or Amazon Elastic Search. To enable logging of requests in your Web ACL, you must first create a Kinesis Data Firehose.\n  Go to Amazon Kinesis Console.   Click Kinesis Data Firehose. Click Create delivery stream. Make sure to create the resource in us-east-1. [This is required when capturing logs for CloudFront](https://docs.aws.amazon.com/waf/latest/developerguide/logging.\n   In the Choose source and destination section.   In the Source section, select Direct PUT. In the Destination section, select Amazon S3.   In the Choose source and destination section, type aws-waf-logs-workshop-26. Prefix the Kinesis Data Firehose with aws-waf-logs-workshop-. This is required by the WAF service.\n  In the Destination settings section.   Click Browse.  Select aws-waf-logs-001(S3 bucket we created) is the storage. Click Choose.   Drag the screen down, Click Create delivery stream.  Go to AWS WAF Console.   Click Web ACLs. Select Global. Click waf-workshop-juice-shop.   In the information of your Web ACL page.   Select Logging and metrics tab. Click Enable.   In the Logging destination section.   Click Kinesis Data Firehose stream. In the Amazon Kinesis Data Firehose delivery stream section, Select aws-waf-logs-workshop-26.   In the Redacted fields section.   Select Single header. In the Redacted headers section, Click Add header Add the header value: Cookie. Click Save   Run command  curl \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;?username=admin\u0026#34; curl \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;?milkshake=banana\u0026amp;favourite-topping=sauce\u0026#34; curl -H \u0026#34;x-milkshake: chocolate\u0026#34; \u0026#34;\u0026lt;Your Juice Shop URL\u0026gt;\u0026#34; 11. Download the logged file in S3 bucket. 12. Search for the Cookie header in the logged file. Conclusion WAF allows you to capture request logs and store them in any Kinesis Data Firehose destination. The logs provide information of the request. The logs also provide the action and rule involved for a request. This information can be invaluable when running a WAF. Use field redaction to avoid logging sensitive information.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]